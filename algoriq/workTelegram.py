import logging
# from aiogram import Bot, Dispatcher, types
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telebot import types   
from pprint import pprint
# from helper import *
# from aiogram.enums.parse_mode import ParseMode
# from aiogram.fsm.storage.memory import MemoryStorage

# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from hubSpotWork import create_hubspot_lead
import textMess
from dotenv import load_dotenv
import os
load_dotenv()

API_TOKEN = os.environ.get('API_TOKEN')
print(API_TOKEN)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=API_TOKEN)
bot = telebot.TeleBot(API_TOKEN, parse_mode='Markdown')
# print(bot)
# dp = Dispatcher(storage=MemoryStorage())

# dp.middleware.setup(LoggingMiddleware())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
states = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
# @bot.business_connection_handler(func=lambda business_connection: True)
# def handle_business_connection(business_connection):
#     update_business_connection(business_connection)
#     logging.info(f"Business connection updated: {business_connection.id}")

# @bot.business_message_handler(func=lambda message: True, content_types=['text', 'photo', 'video'])
# def handle_business_message(message):

# @bot.message_handler(lambda message: states.get(message.chat.id) == "start")
@bot.message_handler(commands=['start'])
def handle_start_button(message: types.Message):

    keyboard = InlineKeyboardMarkup()
    
    keyboard.add(InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="watch_circle"))
    # keyboard = ReplyKeyboardMarkup()
    # keyboard.add(KeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))
        # InlineKeyboardButton(text="üîÑ –î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="feedback"),)
    chatID=message.chat.id

    # bot.send_message(chatID, textMess.startText, reply_markup=keyboard, business_connection_id=business_connection_id)
    bot.send_message(chatID, textMess.startText, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == "watch_circle")
def watch_circle(callback_query: types.CallbackQuery):
    # bot.send_video_note(callback_query.message.chat.id, video_note=open('circle_video.mp4', 'rb'))
    bot.send_video_note(callback_query.message.chat.id, data=open('video1.mp4', 'rb'))
    bot.send_video_note(callback_query.message.chat.id, data=open('video2.mp4', 'rb'))
    bot.send_video_note(callback_query.message.chat.id, data=open('video3.mp4', 'rb'))
    states[callback_query.message.chat.id] = "watch_explainer"
    bot.answer_callback_query(callback_query.id)
    handle_watch_explainer(callback_query.message) 

@bot.message_handler(func=lambda message: states.get(message.chat.id) == "watch_explainer")
def handle_watch_explainer(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="¬´–î–∞–ª–µ–µ¬ª", callback_data="watch_explainer_video"))
    chatID=message.chat.id
    bot.send_message(chatID,"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == "watch_explainer_video")
def watch_explainer_video(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", callback_data="watch_example"))
    keyboard.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="provide_email"))
    # bot.send_video(callback_query.message.chat.id, video=open('explainer_video.mp4', 'rb'))
    bot.send_video(callback_query.message.chat.id, video=open('test.mp4', 'rb'), reply_markup=keyboard)
    bot.answer_callback_query(callback_query.id)
    states[callback_query.message.chat.id] = "watch_example"
    
    # handle_watch_example(callback_query.message)



@bot.callback_query_handler(func=lambda c: c.data == "watch_example")
def handle_watch_example(message: types.CallbackQuery):
    chatID=message.message.chat.id
    bot.send_message(chatID,textMess.textVideoGuide)
    # bot.answer_video(video=open('example_video.mp4', 'rb'))
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="provide_email"))
    bot.send_video(chatID, video=open('test.mp4', 'rb'),reply_markup=keyboard)
    states[chatID] = "urls_message"
    bot.answer_callback_query(message.id)
    # handle_provide_email(message)




@bot.callback_query_handler(func=lambda c: c.data == "urls_message")
def handle_provide_email(message: types.CallbackQuery):
    # chatID=message.chat.id
    chatID=message.message.chat.id
    bot.answer_callback_query(message.id)
    # print('email', message.text)
    bot.send_message(chatID,textMess.urlMessage)
    states[chatID] = "provide_email"
    handle_awaiting_email(message) 


@bot.callback_query_handler(func=lambda c: c.data == "provide_email")
def handle_awaiting_email(message: types.CallbackQuery):
    chatID=message.message.chat.id
    bot.answer_callback_query(message.id)
    bot.send_message(chatID,textMess.emailText)
    states[chatID] = "awaiting_email"
    # handle_email_response(message) 


@bot.message_handler(func=lambda message: states.get(message.chat.id) == "awaiting_email")
def handle_email_response(message: types.Message):
    chatID=message.chat.id
    email = message.text.strip()
    # create_hubspot_lead(email)
    # bot.send_message(chatID,"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à email! –í–∞—à –ª–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ HubSpot.")

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="üîÑ –î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="feedback"),
        InlineKeyboardButton(text="‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_us"),
        InlineKeyboardButton(text="üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ", callback_data="info_and_training")
        # InlineKeyboardButton(text="üîÑ –î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É", url='https://t.me/m/9BaYmNnXZjc1'),
        # InlineKeyboardButton(text="‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url=''
        # InlineKeyboardButton(text="üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ", callback_data="info_and_training")
    )
    #message.send_message(chatID,"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç: [–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞](http://example.com)", reply_markup=keyboard)
    bot.send_message(chatID,textMess.endText, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == "feedback")
def handle_feedback(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="üîù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AlgoriQ", url='https://t.me/m/9BaYmNnXZjc1'))
    keyboard.add(
        InlineKeyboardButton(text="‚öôÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", url='https://t.me/m/_-0QzNy2NzBl',))
    keyboard.add(
        InlineKeyboardButton(text="üö® –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", url='https://t.me/m/DS1FAx5DZmJl',))
    bot.send_message(callback_query.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ 'üîÑ –î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É'.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda c: c.data == "contact_us")
def handle_contact_us(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.message.chat.id, """–†–∞–¥—ã –±—É–¥–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–¥–∏—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å AlgoriQ –ª—É—á—à–µ!

–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å –∏ –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ? –ú—ã –º–æ–∂–µ–º –ø–æ—á–∞—Ç–∏—Ç—å—Å—è —Ç—É—Ç –≤ –±–æ—Ç–µ –∏–ª–∏ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –≤ Zoom/Google.Meet.""")


@bot.callback_query_handler(func=lambda c: c.data == "feedback1")
def handle_contact_us(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.message.chat.id, """–°—É–ø–µ—Ä, –Ω–∞–º –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!
–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –∞—É–¥–∏–æ –æ —Ç–æ–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å.

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–º—è –∫–æ—Ä–æ—Ç–∫–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –∏ –ª–∏—á–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–∞–º –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, —Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞ –∏ –ª—É—á—à–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è –ª–∏—á–Ω–æ!""")
@bot.callback_query_handler(func=lambda c: c.data == "feedback2")
def handle_contact_us(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.message.chat.id, """–ú—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏, –ø–æ—ç—Ç–æ–º—É —Ç–≤–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–ø—ã—Ç –¥–ª—è –Ω–∞—Å –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –∞—É–¥–∏–æ –æ —Ç–æ–º, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å.

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–º—è –∫–æ—Ä–æ—Ç–∫–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –∏ –ª–∏—á–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–∞–º –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, —Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞ –∏ –ª—É—á—à–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è –ª–∏—á–Ω–æ!""")
@bot.callback_query_handler(func=lambda c: c.data == "feedback3")
def handle_contact_us(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.message.chat.id, """–≠—Ç–æ –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—à–∏–±–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã.
–û—á–µ–Ω—å —Ü–µ–Ω–Ω–æ, —á—Ç–æ —Ç—ã –Ω–µ –ø–æ–ª–µ–Ω–∏–ª—Å—è –∏ –∑–∞–±–∏–ª, –∞ —Å–æ–æ–±—â–∞–µ—à—å –Ω–∞–º –æ–± —ç—Ç–æ–º, –±–µ–∑ —Ç–µ–±—è –º—ã –±—ã –æ –Ω–∏—Ö –≤—Ä—è–¥ –ª–∏ —É–∑–Ω–∞–ª–∏ –±—ã ü´∂üèº

–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –∞—É–¥–∏–æ –æ —Ç–æ–º, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å (–∏–ª–∏ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å) üôåÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è""")


@bot.callback_query_handler(func=lambda c: c.data == "info_and_training")
def handle_info_and_training(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.message.chat.id, textMess.urlMessage)

@bot.message_handler()
def handle_start_button(message):
    # def handle_start_button(message: types.Message):
    pprint(message.__dict__)
    print('message: ', message.text)
    —ÅhatID=message.chat.id
    # keyboard = InlineKeyboardMarkup()
    # keyboard.add(InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="watch_circle"))
    # chatID=message.chat.id
    bot.send_message(—ÅhatID, textMess.startText,)

if __name__ == '__main__':
    print('[OK]')
    logging.basicConfig(level=logging.INFO)
    # dp.loop.run_until_complete(dp.start_polling())
    # print(f'[OK]')
    bot.infinity_polling()