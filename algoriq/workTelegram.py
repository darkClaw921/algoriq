import logging
from aiogram import Bot, Dispatcher, types

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from hubSpotWork import create_hubspot_lead
API_TOKEN = 'YOUR_API_TOKEN'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
# dp.middleware.setup(LoggingMiddleware())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
states = {}


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    states[message.chat.id] = "start"


@dp.message_handler(lambda message: states.get(message.chat.id) == "start")
async def handle_start_button(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="watch_circle"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "watch_circle")
async def watch_circle(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_video(callback_query.message.chat.id, video=open('circle_video.mp4', 'rb'))
    states[callback_query.message.chat.id] = "watch_explainer"


@dp.message_handler(lambda message: states.get(message.chat.id) == "watch_explainer")
async def handle_watch_explainer(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", callback_data="watch_explainer_video"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–º–æ—Ç—Ä–µ—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "watch_explainer_video")
async def watch_explainer_video(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_video(callback_query.message.chat.id, video=open('explainer_video.mp4', 'rb'))
    states[callback_query.message.chat.id] = "watch_example"


@dp.message_handler(lambda message: states.get(message.chat.id) == "watch_example")
async def handle_watch_example(message: types.Message):
    await message.answer("–¢–µ–ø–µ—Ä—å —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø—Ä–∏–º–µ—Ä –∏–∑ –ì–∞–π–¥–∞:")
    await message.answer_video(video=open('example_video.mp4', 'rb'))
    states[message.chat.id] = "provide_email"


@dp.message_handler(lambda message: states.get(message.chat.id) == "provide_email")
async def handle_provide_email(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    states[message.chat.id] = "awaiting_email"


@dp.message_handler(lambda message: states.get(message.chat.id) == "awaiting_email")
async def handle_email_response(message: types.Message):
    email = message.text.strip()
    create_hubspot_lead(email)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à email! –í–∞—à –ª–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ HubSpot.")
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="üîÑ –î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É", callback_data="feedback"),
        InlineKeyboardButton(text="‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_us"),
        InlineKeyboardButton(text="üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ", callback_data="info_and_training")
    )
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç: [–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞](http://example.com)", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "feedback")
async def handle_feedback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ 'üîÑ –î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É'.")


@dp.callback_query_handler(lambda c: c.data == "contact_us")
async def handle_contact_us(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ '‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'.")


@dp.callback_query_handler(lambda c: c.data == "info_and_training")
async def handle_info_and_training(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ 'üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ'.")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    dp.loop.run_until_complete(dp.start_polling())
